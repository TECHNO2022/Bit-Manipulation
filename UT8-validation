//Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).

//A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:

   // For a 1-byte character, the first bit is a 0, followed by its Unicode code.
   // For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.

//This is how the UTF-8 encoding would work:

     Number of Bytes   |        UTF-8 Octet Sequence
                       |              (binary)
   --------------------+-----------------------------------------
            1          |   0xxxxxxx
            2          |   110xxxxx 10xxxxxx
            3          |   1110xxxx 10xxxxxx 10xxxxxx
            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx

class Solution {
    public boolean validUtf8(int[] data) {
        
        int remaining_byte=0;
        
        for(int v:data)
        {
            if(remaining_byte==0)
            {
                if((v>>7)==0b0)
                {
                    remaining_byte=0;

                }
                else if((v>>5)==0b110)
                {
                    remaining_byte=1;

                }
                else if((v>>4)==0b1110)
                {
                    remaining_byte=2;
                }
                else if((v>>3)==0b11110)
                {
                    remaining_byte=3; 
                }
                else
                {
                    return false;
                }
            }
            else
            {
                if((v>>6)==0b10)
                    remaining_byte--;
                else
                    return false;
            }
                
                
        }
        if(remaining_byte==0)
            
        return true;
        else 
            return false;
        
    }
}
